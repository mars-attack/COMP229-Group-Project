{"version":3,"sources":["./src/app/admin/login/login.component.ts","./src/app/admin/login/login.component.html","./src/app/admin/register/register.component.ts","./src/app/admin/register/register.component.html","./src/app/admin/update-user/update-user.component.ts","./src/app/admin/update-user/update-user.component.html","./src/app/admin/email-validator.ts","./src/app/admin/admin.module.ts"],"names":[],"mappings":"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","file":"admin-admin-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../../model/user.model';\r\nimport { AuthService } from '../../model/auth.service';\r\nimport { FlashMessagesService } from 'angular2-flash-messages';\r\n\r\n\r\n@Component({\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit\r\n{\r\n  public user: User;\r\n\r\n  constructor(private router: Router,\r\n              private auth: AuthService,\r\n              private flashMessage: FlashMessagesService) { }\r\n\r\n  ngOnInit(): void\r\n  {\r\n    this.user = new User();\r\n  }\r\n\r\n  authenticate(form: NgForm): void\r\n  {\r\n    if (form.valid)\r\n    {\r\n      // perform authentication\r\n      this.auth.authenticate(this.user).subscribe(data => {\r\n        if (data.success)\r\n        {\r\n          this.auth.storeUserDate(data.token, data.user);\r\n          this.router.navigateByUrl('/surveys');\r\n        }\r\n        else\r\n        {\r\n          this.flashMessage.show(data.msg, {cssClass: 'alert-danger', timeOut: 6000});\r\n        }\r\n      });\r\n    }\r\n    else\r\n    {\r\n      this.flashMessage.show('Please fill in all feilds', {cssClass: 'alert-danger', timeOut: 6000});\r\n    }\r\n  }\r\n}\r\n","<!-- Login Component -->\r\n<main class=\"container mt-5 mb-5\">\r\n  <span class=\"text-center\">\r\n    <h1>Please Login</h1>\r\n  </span>\r\n  <div class=\"row\">\r\n\r\n    <form class=\"col col-lg-8 col-md-12 col-sm-12\" autocomplete='off' #form='ngForm' (ngSubmit)='authenticate(form)'\r\n      #loginForm=\"ngForm\">\r\n      <fieldset class=\"form-group\">\r\n\r\n        <label for=\"username\" [ngStyle]=\"{'visibility': user.username? 'visible':'hidden'}\">Username:</label>\r\n\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]='user.username' name='username' placeholder='Enter Username'\r\n          id='username' required autofocus autocomplete=\"off\" #username=\"ngModel\"\r\n          [ngClass]=\"{ 'is-invalid': username.invalid && username.dirty}\">\r\n        <div *ngIf=\"username.invalid && username.dirty\" class=\"invalid-feedback\">\r\n          <div *ngIf=\"username.errors.required\">Username is required</div>\r\n        </div>\r\n      </fieldset>\r\n\r\n      <fieldset class=\"form-group\">\r\n        <label for=\"password\" [ngStyle]=\"{'visibility': user.password? 'visible':'hidden'}\">Password:</label>\r\n        <input type=\"password\" class=\"form-control\" [(ngModel)]='user.password' name='password'\r\n          placeholder='Enter Password' id='password' required autocomplete=\"off\" #password=\"ngModel\"\r\n          [ngClass]=\"{ 'is-invalid': password.invalid && password.dirty}\">\r\n        <div *ngIf=\"password.invalid && password.dirty\" class=\"invalid-feedback\">\r\n          <div *ngIf=\"password.errors.required\">Password is required</div>\r\n        </div>\r\n        <a id=\"register_link\" routerLink=\"/register\">or register here</a>\r\n      </fieldset>\r\n\r\n      <fieldset class=\"mt-3 form-group text-left\">\r\n        <button class='btn btn-primary m-1' type='submit' [disabled]=\"!loginForm.form.valid\">\r\n          <i class=\"fas fa-sign-in-alt\"></i>\r\n          Log In\r\n        </button>\r\n        <button class='btn btn-secondary m-1' routerLink='/home'>\r\n          <i class=\"fas fa-undo\"></i>\r\n          Cancel\r\n        </button>\r\n\r\n      </fieldset>\r\n    </form>\r\n\r\n    <span class=\"col col-lg-4 col-md-12 col-sm-12\" id=\"img-wrap\">\r\n      <img src=\"assets/images/loginImg.png\" class=\"img\" alt=\"loginPageImage\" id=\"loginImg\">\r\n    </span>\r\n\r\n  </div>\r\n</main>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../../model/user.model';\r\nimport { AuthService } from '../../model/auth.service';\r\nimport { FlashMessagesService } from 'angular2-flash-messages';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  user: User;\r\n  validEmail: boolean;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private flashMessage: FlashMessagesService\r\n\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = new User();\r\n  }\r\n\r\n  onRegisterSubmit(): void {\r\n    this.authService.registerUser(this.user).subscribe(data => {\r\n      if (data.success) {\r\n        this.flashMessage.show('Thank you for registering', {cssClass: 'alert-success', timeOut: 6000});\r\n        this.router.navigate(['/login']);\r\n      } else {\r\n        this.flashMessage.show(data.msg, {cssClass: 'alert-danger', timeOut: 6000});\r\n      }\r\n    });\r\n  }\r\n}\r\n","<!-- Register Component -->\r\n<main class=\"container mt-5 mb-5\">\r\n  <span class=\"text-center\">\r\n    <h1>Create an account</h1>\r\n  </span>\r\n  <div class=\"row\">\r\n\r\n    <form class=\"col col-lg-8 col-md-12\" autocomplete=\"off\" (submit)=\"onRegisterSubmit()\" #registerForm=\"ngForm\">\r\n      <fieldset class=\"form-group\">\r\n        <label for=\"username\" [ngStyle]=\"{'visibility': user.username? 'visible':'hidden'}\">Username:</label>\r\n\r\n        <input type=\"username\" class=\"form-control\" [(ngModel)]=\"user.username\" name=\"username\"\r\n          placeholder=\"Enter username\" #username=\"ngModel\"\r\n          [ngClass]=\"{ 'is-invalid': username.invalid && username.dirty}\" required>\r\n        <div *ngIf=\"username.invalid && username.dirty\" class=\"invalid-feedback\">\r\n          <div *ngIf=\"username.errors.required\">Username is required</div>\r\n        </div>\r\n      </fieldset>\r\n\r\n      <fieldset class=\"form-group\">\r\n        <label for=\"password\" [ngStyle]=\"{'visibility': user.password? 'visible':'hidden'}\">Password:</label>\r\n\r\n        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"user.password\" name=\"password\"\r\n          placeholder=\"Enter Password\" #password=\"ngModel\"\r\n          [ngClass]=\"{ 'is-invalid': password.invalid && password.dirty}\" required minlength=\"6\">\r\n        <div *ngIf=\"password.invalid && password.dirty\" class=\"invalid-feedback\">\r\n          <div *ngIf=\"password.errors.required\">Password is required</div>\r\n          <div *ngIf=\"password.errors.minlength\">Password must be at least 6 characters</div>\r\n        </div>\r\n      </fieldset>\r\n\r\n      <fieldset class=\"form-group\">\r\n        <label for=\"email\" [ngStyle]=\"{'visibility': user.email? 'visible':'hidden'}\">Email:</label>\r\n        <!-- uses custom email directive validator-->\r\n        <input type=\"email\" class=\"form-control\" [(ngModel)]=\"user.email\" name=\"email\" placeholder=\"Enter Email\"\r\n          id=\"email\" autocomplete=\"off\" #email=\"ngModel\" required emailValidateDirective\r\n          [ngClass]=\"{ 'is-invalid': email.invalid && email.dirty}\">\r\n        <div *ngIf=\"email.invalid && email.dirty\" class=\"invalid-feedback\">\r\n          <div *ngIf=\"email.errors.required\">Email is required</div>\r\n          <div *ngIf=\"email.errors.emailInvalid\">Email must be a valid email address</div>\r\n        </div>\r\n      </fieldset>\r\n\r\n      <fieldset class=\"form-group\">\r\n        <label for=\"displayName\" [ngStyle]=\"{'visibility': user.displayName? 'visible':'hidden'}\">Display Name:</label>\r\n\r\n        <input type=\"displayName\" class=\"form-control\" [(ngModel)]=\"user.displayName\" name=\"displayName\"\r\n          placeholder=\"Enter Display Name\" #displayName=\"ngModel\"\r\n          [ngClass]=\"{ 'is-invalid': displayName.invalid && displayName.dirty}\" required>\r\n        <div *ngIf=\"displayName.invalid && displayName.dirty\" class=\"invalid-feedback\">\r\n          <div *ngIf=\"displayName.errors.required\">Display name is required</div>\r\n        </div>\r\n      </fieldset>\r\n\r\n\r\n      <fieldset class=\"mt-4 form-group text-left\">\r\n        <button class='btn btn-primary m-1' type='submit' [disabled]=\"!registerForm.form.valid\">\r\n          <i class=\"fas fa-sign-in-alt\"></i>\r\n          Register\r\n        </button>\r\n        <button id='cancelBtn' class='btn btn-secondary m-1' routerLink='/home'>\r\n          <i class=\"fas fa-undo\"></i>\r\n          Cancel\r\n        </button>\r\n\r\n\r\n      </fieldset>\r\n    </form>\r\n\r\n\r\n    <span class=\"col col-lg-4 col-md-12\" id=\"img-wrap\">\r\n      <img src=\"assets/images/registerImg.png\" class=\"img\" alt=\"registerPageImage\" id=\"registerImg\">\r\n    </span>\r\n\r\n  </div>\r\n</main>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FlashMessagesService } from 'angular2-flash-messages';\r\nimport { AuthService } from 'src/app/model/auth.service';\r\nimport { User } from 'src/app/model/user.model';\r\n\r\n@Component({\r\n  selector: 'app-update-user',\r\n  templateUrl: './update-user.component.html',\r\n  styleUrls: ['./update-user.component.css']\r\n})\r\nexport class UpdateUserComponent implements OnInit {\r\n\r\n  user: User;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private flashMessage: FlashMessagesService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.user = JSON.parse(localStorage.getItem('user'));\r\n    this.user.password = '';\r\n    this.user.newPassword = '';\r\n  }\r\n\r\n  onUpdateSubmit(): void {\r\n\r\n    // So the user can update info without changing password\r\n    if (this.user.newPassword === '' || this.user.newPassword === null) {\r\n      this.user.newPassword = this.user.password;\r\n    }\r\n    this.authService.updateUser(this.user).subscribe(data => {\r\n      if (data.success) {\r\n        this.flashMessage.show('Account updated', {cssClass: 'alert-success', timeOut: 6000});\r\n        localStorage.setItem('user', JSON.stringify(this.user));\r\n        // this.router.navigate(['/']);\r\n      } else {\r\n        this.flashMessage.show('Error updating account, please try again.', {cssClass: 'alert-danger', timeOut: 6000});\r\n      }\r\n    });\r\n\r\n    this.user.newPassword = '';\r\n  }\r\n\r\n}\r\n","<!-- Update User Info Component -->\r\n<main class=\"container mt-5 mb-5\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6 offset-md-3 col-lg-6 offset-lg-3 col-sm-8 offset-sm-1\">\r\n      <form autocomplete=\"off\">\r\n\r\n        <span class=\"text-center\">\r\n          <h1>Update Your Account</h1>\r\n        </span>\r\n\r\n        <fieldset class=\"form-group\">\r\n          <label for=\"email\" [ngStyle]=\"{'visibility': user.email? 'visible':'hidden'}\">*Email:</label>\r\n          <!-- uses custom email directive validator-->\r\n          <input type=\" email\" class=\"form-control\" [(ngModel)]=\"user.email\" name=\"email\" placeholder=\"Enter Email\"\r\n            id=\"email\" autocomplete=\"off\" #email=\"ngModel\" required emailValidateDirective\r\n            [ngClass]=\"{ 'is-invalid': email.invalid && email.dirty}\">\r\n          <div *ngIf=\"email.invalid && email.dirty\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"email.errors.required\">Email is required</div>\r\n            <div *ngIf=\"email.errors.emailInvalid\">Email must be a valid email address</div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset class=\"form-group\">\r\n          <label for=\"displayName\" [ngStyle]=\"{'visibility': user.displayName? 'visible':'hidden'}\">*Display\r\n            Name:</label>\r\n          <input type=\"displayName\" class=\"form-control\" [(ngModel)]=\"user.displayName\" name=\"displayName\"\r\n            placeholder=\"Enter Display Name\" #displayName=\"ngModel\"\r\n            [ngClass]=\"{ 'is-invalid': displayName.invalid && displayName.dirty}\" required>\r\n          <div *ngIf=\"displayName.invalid && displayName.dirty\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"displayName.errors.required\">Display name is required</div>\r\n          </div>\r\n        </fieldset>\r\n\r\n\r\n        <fieldset class=\"form-group\">\r\n          <label for=\"password\" [ngStyle]=\"{'visibility': user.password? 'visible':'hidden'}\">*Current Password:</label>\r\n          <input type=\"password\" class=\"form-control\" [(ngModel)]=\"user.password\" name=\"password\"\r\n            placeholder=\"Enter Current Password\" #password=\"ngModel\" id=\"password\" required autocomplete=\"off\"\r\n            [ngClass]=\"{ 'is-invalid': password.invalid && password.dirty}\">\r\n          <div *ngIf=\"password.invalid && password.dirty\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"password.errors.required\">Password is required</div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset class=\"form-group\">\r\n          <label for=\"newPassword\" [ngStyle]=\"{'visibility': user.newPassword? 'visible':'hidden'}\">New\r\n            Password:</label>\r\n          <input type=\"password\" class=\"form-control\" [(ngModel)]=\"user.newPassword\" name=\"newPassword\"\r\n            placeholder=\"Enter New Password\" #newPassword=\"ngModel\"\r\n            [ngClass]=\"{ 'is-invalid': newPassword.invalid && newPassword.dirty}\" minlength=\"6\">\r\n          <div *ngIf=\"newPassword.invalid && newPassword.dirty\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"newPassword.errors.minlength\">Password must be at least 6 characters</div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset class=\"mt-4 form-group text-left\">\r\n          <button class='btn btn-primary m-1' type='submit' (click)=\"onUpdateSubmit()\">\r\n            <i class=\"fas fa-sign-in-alt\"></i>\r\n            Update\r\n          </button>\r\n          <button class='btn btn-warning m-1' routerLink='/home'>\r\n            <i class=\"fas fa-undo\"></i>\r\n            Cancel\r\n          </button>\r\n        </fieldset>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n</main>\r\n","import { Directive } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\n// Custom email validator\r\n@Directive({\r\n  // tslint:disable-next-line: directive-selector\r\n  selector: '[emailValidateDirective]',\r\n  providers: [{\r\n    provide: NG_VALIDATORS,\r\n    useExisting: EmailValidateDirective,\r\n    multi: true\r\n  }]\r\n})\r\nexport class EmailValidateDirective implements Validator {\r\n  validate(control: AbstractControl): {[key: string]: boolean} | null {\r\n    const emailCheck = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})$/;\r\n    if (control.value && emailCheck.test(control.value) === false) {\r\n      return { emailInvalid: true }; // if validation is not passed\r\n    }\r\n    return null; // if validation is passed\r\n  }\r\n}\r\n","import { FormsModule } from '@angular/forms';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AuthGuard } from '../guards/auth.guard';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { UpdateUserComponent } from './update-user/update-user.component';\r\nimport { EmailValidateDirective } from './email-validator';\r\n\r\n\r\nconst routing = RouterModule.forChild([\r\n  { path: 'login', component: LoginComponent, data: {title: 'Login'}},\r\n  { path: 'register', component: RegisterComponent, data: {title: 'Register'}},\r\n  { path: 'update', component: UpdateUserComponent,  data: {title: 'Update Account'}, canActivate: [AuthGuard]},\r\n  { path: '**', redirectTo: 'login' },\r\n]);\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, routing],\r\n  providers: [AuthGuard],\r\n  declarations: [LoginComponent, RegisterComponent, UpdateUserComponent, EmailValidateDirective],\r\n  exports: [EmailValidateDirective]\r\n})\r\nexport class AdminModule {}\r\n"],"sourceRoot":"webpack:///"}